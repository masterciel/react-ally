
# use babel parser (requires babel-eslint)
parser: babel-eslint

# set environmet (to determine which globals are available)
env:
  browser:      true  # browser global variables.
  node:         true  # Node.js global variables and Node.js-specific rules.
  es6:          true  # enable all ECMAScript 6 features except for modules.

# enable plugins
plugins:
  - react
  - babel

# enable all language features
parserOptions:
  ecmaFeatures:
    arrowFunctions:                   true # enable arrow functions
    binaryLiterals:                   true # enable binary literals
    blockBindings:                    true # enable let and const (aka block bindings)
    classes:                          true # enable classes
    defaultParams:                    true # enable default function parameters
    destructuring:                    true # enable destructuring
    forOf:                            true # enable for-of loops
    generators:                       true # enable generators
    modules:                          true # enable modules and global strict mode
    objectLiteralComputedProperties:  true # enable computed object literal property names
    objectLiteralDuplicateProperties: true # enable duplicate object literal properties in strict mode
    objectLiteralShorthandMethods:    true # enable object literal shorthand methods
    objectLiteralShorthandProperties: true # enable object literal shorthand properties
    octalLiterals:                    true # enable octal literals
    regexUFlag:                       true # enable the regular expression u flag
    regexYFlag:                       true # enable the regular expression y flag
    restParams:                       true # enable the rest parameters
    spread:                           true # enable the spread operator
    superInFunctions:                 true # enable super references inside of functions
    templateStrings:                  true # enable template strings
    unicodeCodePointEscapes:          true # enable code point escapes
    globalReturn:                     true # allow return statements in the global scope
    jsx:                              true # enable JSX

# configure rules
rules:
  comma-dangle:
    - error
    - never

  # Possible Errors
  no-cond-assign:                     off      # disallow condition assignments (eg inside if block)
  no-console:                         off      # disallow console.log
  no-constant-condition:              error    # disallow if (true) and if (false)
  no-control-regex:                   off      # disallow escape codes in regex
  no-debugger:                        off      # disallow debugger
  no-dupe-args:                       error    # disallow duplicate fn arguments
  no-dupe-keys:                       error    # disallow duplicate object keys
  no-duplicate-case:                  error    # disallow duplicate case statements
  no-empty:                           warn     # disallow empty blocks
  no-empty-character-class:           warn     # siallow empty [] in regex
  no-ex-assign:                       error    # cannot assign to error in catch block
  no-extra-boolean-cast:              error    # prevent superfluous boolean casts (eg !!!)
  no-extra-parens:                    off      # disallow superfluous parens
  no-extra-semi:                      error    # disallow semicolons
  no-func-assign:                     error    # disallow faulty function assignments
  no-inner-declarations:              warn     # disallow decalring functions inside nested block
  no-invalid-regexp:                  error    # prevent invalid regexes
  no-irregular-whitespace:            error    # prevent spacing characters other than space
  no-negated-in-lhs:                  error    # prevent !a in b instead of !(a in b) bug
  no-obj-calls:                       error    # prevent the accidental calling of global objects as functions
  no-regex-spaces:                    warn     # use / {3}/ instead of /   /
  no-sparse-arrays:                   error    # disallow [,,]
  no-unexpected-multiline:            error    # comly with ASI
  no-unreachable:                     error    # disallow unreachable code
  use-isnan:                          error    # never compare to NaN
  valid-jsdoc:                        warn     # validate jsdoc comments
  valid-typeof:                       error    # ensure string compared to typeof is valid

  # Best Practices
  accessor-pairs:                     off      # enforce getter/setter pairs in objects
  array-callback-return:              error    # enforce return statements in callbacks of arrayâ€™s methods
  block-scoped-var:                   off      # treat var statements as if they were block scoped
  complexity:                         warn     # specify the maximum cyclomatic complexity allowed in a program
  consistent-return:                  error    # require return statements to either always or never specify values
  curly:                              off      # specify curly brace conventions for all control statements
  default-case:                       warn     # require default case in switch statements
  dot-location:                                # enforce consistent newlines before or after dots
    - error
    - property
  dot-notation:                       error    # encourage use of dot notation whenever possible
  eqeqeq:                             error    # require use of === and !==
  guard-for-in:                       warn     # ensure for-in loops have an if statement
  no-alert:                           error    # disallow use of alert, confirm, and prompt
  no-caller:                          error    # disallow use of arguments.caller or arguments.callee
  no-case-declarations:               error    # disallow lexical declarations in case clauses
  no-div-regex:                       error    # disallow division operators explicitly at beginning of regular expression
  no-else-return:                     off      # disallow else after a return in an if
  no-empty-function:                  warn     # disallow use of empty functions
  no-empty-pattern:                   error    # disallow use of empty destructuring patterns
  no-eq-null:                         error    # disallow comparisons to null without a type-checking operator
  no-eval:                            error    # disallow use of eval()
  no-extend-native:                   warn     # disallow adding to native types
  no-extra-bind:                      warn     # disallow unnecessary function binding
  no-extra-label:                     error    # disallow unnecessary labels
  no-fallthrough:                     warn     # disallow fallthrough of case statements
  no-floating-decimal:                off      # disallow the use of leading or trailing decimal points in numeric literals
  no-implicit-coercion:               error    # disallow the type conversions with shorter notations
  no-implicit-globals:                warn     # disallow var and named functions in global scope
  no-implied-eval:                    error    # disallow use of eval()-like methods
  no-invalid-this:                    error    # disallow this keywords outside of classes or class-like objects
  no-iterator:                        off      # disallow usage of __iterator__ property
  no-labels:                          error    # disallow use of labeled statements
  no-lone-blocks:                     error    # disallow unnecessary nested blocks
  no-loop-func:                       error    # disallow creation of functions within loops
  no-magic-numbers:                   off      # disallow the use of magic numbers
  no-multi-spaces:                    off      # disallow use of multiple spaces
  no-multi-str:                       off      # disallow use of multiline strings
  no-native-reassign:                 error    # disallow reassignments of native objects
  no-new:                             error    # disallow use of the new operator when not part of an assignment or comparison
  no-new-func:                        error    # disallow use of new operator for Function object
  no-new-wrappers:                    error    # disallow creating new instances of String,Number, and Boolean
  no-octal:                           off      # disallow use of octal literals
  no-octal-escape:                    off      # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  no-param-reassign:                  error    # disallow reassignment of function parameters
  no-proto:                           off      # disallow usage of __proto__ property
  no-redeclare:                       error    # disallow declaring the same variable more than once
  no-return-assign:                   error    # disallow use of assignment in return statement
  no-script-url:                      error    # disallow use of javascript: urls.
  no-self-assign:                     error    # disallow assignments where both sides are exactly the same
  no-self-compare:                    error    # disallow comparisons where both sides are exactly the same
  no-sequences:                       error    # disallow use of the comma operator
  no-throw-literal:                   warn     # restrict what can be thrown as an exception
  no-unmodified-loop-condition:       warn     # disallow unmodified conditions of loops
  no-unused-expressions:                       # disallow usage of expressions in statement position
    - warn
    - allowShortCircuit: true
      allowTernary:      true
  no-unused-labels:                   error    # disallow unused labels
  no-useless-call:                    error    # disallow unnecessary .call() and .apply()
  no-useless-concat:                  error    # disallow unnecessary concatenation of literals or template literals
  no-useless-escape:                  error    # disallow unnecessary usage of escape character
  no-void:                            error    # disallow use of the void operator
  no-warning-comments:                off      # disallow usage of configurable warning terms in comments: e.g. TODO or FIXME
  no-with:                            error    # disallow use of the with statement
  radix:                              off      # require use of the second argument for parseInt()
  vars-on-top:                        off      # require declaration of all vars at the top of their containing scope
  wrap-iife:                          error    # require immediate function invocation to be wrapped in parentheses
  yoda:                                        # require or disallow Yoda conditions
    - error

  # Strict Mode
  strict:                             off      # require effective use of strict mode directives

  # Variables
  init-declarations:                  error    # enforce or disallow variable initializations at definition
  no-catch-shadow:                    error    # disallow the catch clause parameter name being the same as a variable in the outer scope
  no-delete-var:                      error    # disallow deletion of variables
  no-label-var:                       off      # disallow labels that share a name with a variable
  no-restricted-globals:              off      # restrict usage of specified global variables
  no-shadow:                          warn     # disallow declaration of variables already declared in the outer scope
  no-shadow-restricted-names:         error    # disallow shadowing of names such as arguments
  no-undef:                           error    # disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undef-init:                      error    # disallow use of undefined when initializing variables
  no-undefined:                       off      # disallow use of undefined variable
  no-unused-vars:                     warn     # disallow declaration of variables that are not used in the code
  no-use-before-define:               error    # disallow use of variables before they are defined

  # Node.js and CommonJS
  callback-return:                    off      # enforce return after a callback
  global-require:                     off      # enforce require() on top-level module scope
  handle-callback-err:                warn     # enforce error handling in callbacks
  no-mixed-requires:                  off      # disallow mixing regular variable and require declarations
  no-new-require:                     off      # disallow use of new operator with the require function
  no-path-concat:                     error    # disallow string concatenation with __dirname and __filename
  no-process-env:                     off      # disallow use of process.env
  no-process-exit:                    off      # disallow process.exit()
  no-restricted-modules:              off      # restrict usage of specified modules when loaded by require function
  no-sync:                            off      # disallow use of synchronous methods

  # Stylistic Issues
  array-bracket-spacing:               off     # enforce spacing inside array brackets
  block-spacing:                       error   # enforce spaces inside of single line blocks
  brace-style:                                 # enforce one true brace style
    - error
    - 1tbs
    - allowSingleLine: true
  camelcase:                           off     # require camel case names
  comma-spacing:                       error   # enforce spacing before and after comma
  comma-style:                                 # enforce one true comma style
    - error
    - first
  computed-property-spacing:           error   # require or disallow padding inside computed properties
  consistent-this:                     off     # enforce consistent naming when capturing the current execution context
  eol-last:                            off     # enforce newline at the end of file, with no multiple empty lines
  func-names:                          off     # require function expressions to have a name
  func-style:                                  # enforce use of function declarations or expressions
    - error
    - expression
  id-blacklist:                        off     # disallow certain identifiers to prevent them being used
  id-length:                           off     # enforce minimum and maximum identifier lengths (variable names, property names etc.)
  id-match:                            off     # require identifiers to match the provided regular expression
  indent:                              off     # specify tab or space width for your code
  jsx-quotes:                                  # specify whether double or single quotes should be used in JSX attributes
    - error
    - prefer-single
  key-spacing:                         off     # enforce spacing between keys and values in object literal properties
  keyword-spacing:                     error   # enforce spacing before and after keywords
  linebreak-style:                     error   # enforce linebreak style
  lines-around-comment:                off     # enforce empty lines around comments
  max-depth:                           off     # specify the maximum depth that blocks can be nested
  max-len:                                     # specify the maximum length of a line in your program
    - error
    - 80
    - 2
  max-nested-callbacks:                off     # specify the maximum depth callbacks can be nested
  max-params:                          off     # specify the number of parameters that can be used in the function declaration
  max-statements:                      off     # specify the maximum number of statement allowed in a function
  max-statements-per-line:             off     # specify the maximum number of statements allowed per line
  new-cap:                             off     # require a capital letter for constructors
  new-parens:                          error   # disallow the omission of parentheses when invoking a constructor with no arguments
  newline-after-var:                   off     # require or disallow an empty newline after variable declarations
  newline-before-return:               off     # require newline before return statement
  newline-per-chained-call:                    # enforce newline after each call when chaining the calls
    - warn
    - ignoreChainWithDepth: 3
  no-array-constructor:                off     # disallow use of the Array constructor
  no-bitwise:                          warn    # disallow use of bitwise operators
  no-continue:                         error   # disallow use of the continue statement
  no-inline-comments:                  off     # disallow comments inline after code
  no-lonely-if:                        error   # disallow if as the only statement in an else block
  no-mixed-spaces-and-tabs:            error   # disallow mixed spaces and tabs for indentation
  no-multiple-empty-lines:             off     # disallow multiple empty lines
  no-negated-condition:                warn    # disallow negated conditions
  no-nested-ternary:                   warn    # disallow nested ternary expressions
  no-new-object:                       error   # disallow the use of the Object constructor
  no-plusplus:                         error   # disallow use of unary operators, ++ and --
  no-restricted-syntax:                off     # disallow use of certain syntax in code
  no-spaced-func:                      error   # disallow space between function identifier and application
  no-ternary:                          off     # disallow the use of ternary operators
  no-trailing-spaces:                  error   # disallow trailing whitespace at the end of lines
  no-underscore-dangle:                off     # disallow dangling underscores in identifiers
  no-unneeded-ternary:                 error   # disallow the use of ternary operators when a simpler alternative exists
  no-whitespace-before-property:       error   # disallow whitespace before properties
  object-curly-spacing:                off     # require or disallow padding inside curly braces
  one-var:                             off     # require or disallow one variable declaration per function
  one-var-declaration-per-line:        off     # require or disallow an newline around variable declarations
  operator-assignment:                 warn    # require assignment operator shorthand where possible or prohibit it entirely
  operator-linebreak:                          # enforce operators to be placed before or after line breaks
    - error
    - before
    - overrides:
       =: after
  padded-blocks:                       off     # enforce padding within blocks
  quote-props:                                 # require quotes around object literal property names
    - error
    - as-needed
    - keywords: true
  quotes:                                      # specify whether backticks, double or single quotes should be used
    - error
    - single
  require-jsdoc:                       off     # require JSDoc comment
  semi:                                        # require or disallow use of semicolons instead of ASI
    - error
    - never
  semi-spacing:                        error   # enforce spacing before and after semicolons
  sort-imports:                        off     # enforce sorting import declarations within module
  sort-vars:                           off     # enforce sorting variables within the same declaration block
  space-before-blocks:                 error   # require or disallow a space before blocks
  space-before-function-paren:         error   # require or disallow a space before function opening parenthesis
  space-in-parens:                     off     # require or disallow spaces inside parentheses
  space-infix-ops:                     error   # require spaces around operators
  space-unary-ops:                     error   # require or disallow spaces before/after unary operators
  spaced-comment:                      error   # require or disallow a space immediately following the // or /* in a comment
  wrap-regex:                          off     # require regex literals to be wrapped in parentheses

  # ECMAScript 6
  arrow-body-style:                    off     # require braces in arrow function body
  arrow-parens:                        off     # require parens in arrow function arguments
  arrow-spacing:                       error   # require space before/after arrow functionâ€™s arrow
  constructor-super:                   warn    # ensure calling of super() in constructors
  generator-star-spacing:              off     # enforce spacing around the * in generator functions
  no-class-assign:                     error   # disallow modifying variables of class declarations
  no-confusing-arrow:                  warn    # disallow arrow functions where they could be confused with comparisons
  no-const-assign:                     error   # disallow modifying variables that are declared using const
  no-dupe-class-members:               error   # disallow duplicate name in class members
  no-duplicate-imports:                error   # disallow duplicate module imports
  no-new-symbol:                       error   # disallow use of the new operator with the Symbol object
  no-restricted-imports:               off     # restrict usage of specified modules when loaded by import declaration
  no-this-before-super:                error   # disallow use of this/super before calling super() in constructors
  no-useless-constructor:              error   # disallow unnecessary constructor
  no-var:                              error   # require let or const instead of var
  object-shorthand:                    off     # require method and property shorthand syntax for object literals
  prefer-arrow-callback:               off     # suggest using arrow functions as callbacks
  prefer-const:                        warn    # suggest using const declaration for variables that are never reassigned after declared
  prefer-reflect:                      off     # suggest using Reflect methods where applicable
  prefer-rest-params:                  error   # suggest using the rest parameters instead of arguments
  prefer-spread:                       error   # suggest using the spread operator instead of .apply()
  prefer-template:                     error   # suggest using template literals instead of strings concatenation
  require-yield:                       off     # disallow generator functions that do not have yield
  template-curly-spacing:              error   # enforce spacing around embedded expressions of template strings
  yield-star-spacing:                          # enforce spacing around the * in yield* expressions
    - error
    - both

  # JSX
  react/display-name:                  off     # Prevent missing displayName in a React component definition
  react/forbid-prop-types:             off     # Forbid certain propTypes
  react/no-danger:                     off     # Prevent usage of dangerous JSX properties
  react/no-deprecated:                 error   # Prevent usage of deprecated methods
  react/no-did-mount-set-state:        off     # Prevent usage of setState in componentDidMount
  react/no-did-update-set-state:       off     # Prevent usage of setState in componentDidUpdate
  react/no-direct-mutation-state:      error   # Prevent direct mutation of this.state
  react/no-is-mounted:                 error   # Prevent usage of isMounted
  react/no-multi-comp:                 off     # Prevent multiple component definition per file
  react/no-set-state:                  off     # Prevent usage of setState
  react/no-string-refs:                off     # Prevent using string references in ref attribute.
  react/no-unknown-property:           error   # Prevent usage of unknown DOM property (fixable)
  react/prefer-es6-class:              error   # Enforce ES5 or ES6 class for React Components
  react/prefer-stateless-function:     warn    # Enforce stateless React Components to be written as a pure function
  react/prop-types:                    off     # Prevent missing props validation in a React component definition
  react/react-in-jsx-scope:            error   # Prevent missing React when using JSX
  react/require-extension:             off     # Restrict file extensions that may be required
  react/self-closing-comp:             warn    # Prevent extra closing tags for components without children
  react/sort-comp:                     off     # Enforce component methods order
  react/sort-prop-types:               off     # Enforce propTypes declarations alphabetical sorting
  react/wrap-multilines:               error   # Prevent missing parentheses around multilines JSX (fixable)

  react/jsx-boolean-value:             error   # Enforce boolean attributes notation in JSX (fixable)
  react/jsx-closing-bracket-location:  error   # Validate closing bracket location in JSX (fixable)
  react/jsx-curly-spacing:             error   # Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
  react/jsx-equals-spacing:            off     # Enforce or disallow spaces around equal signs in JSX attributes (fixable)
  react/jsx-handler-names:             off     # Enforce event handler naming conventions in JSX
  react/jsx-indent-props:                      # Validate props indentation in JSX (fixable)
    - error
    - 2
  react/jsx-indent:                           # Validate JSX indentation
    - error
    - 2
  react/jsx-key:                       warn    # Validate JSX has key prop when in array or iterator
  react/jsx-max-props-per-line:        off     # Limit maximum of props on a single line in JSX
  react/jsx-no-bind:                   warn    # Prevent usage of .bind() and arrow functions in JSX props
  react/jsx-no-duplicate-props:        error   # Prevent duplicate props in JSX
  react/jsx-no-literals:               off     # Prevent usage of unwrapped JSX strings
  react/jsx-no-undef:                  error   # Disallow undeclared variables in JSX
  react/jsx-pascal-case:               error   # Enforce PascalCase for user-defined JSX components
  react/jsx-sort-props:                off     # Enforce props alphabetical sorting
  react/jsx-space-before-closing:      error   # Validate spacing before closing bracket in JSX (fixable)
  react/jsx-uses-react:                1       # Prevent React to be incorrectly marked as unused
  react/jsx-uses-vars:                 1       # Prevent variables used in JSX to be incorrectly marked as unused

  # Babel
  babel/generator-star-spacing:                # Handles async/await functions correctly
    - error
    - both
  babel/new-cap:                       warn    # Ignores capitalized decorators (@Decorator)
  babel/array-bracket-spacing:                 # Handles destructuring arrays with flow type in function parameters
    - error
    - always
  babel/object-curly-spacing:                  # doesn't complain about export x from "mod"; or export * as x from "mod";
    - error
    - always
  babel/object-shorthand:              error   # doesn't fail when using object spread (...obj)
  babel/arrow-parens:                  off     # Handles async functions correctly
  babel/no-await-in-loop:                      # guard against awaiting async functions inside of a loop
    - error

# vim: ft=yaml
